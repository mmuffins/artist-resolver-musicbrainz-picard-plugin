name: Create Release

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - 'dependabot/**'

env:
  EXTENSION_FILE_NAME: artist_resolver 

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.VERSION }}
    
    steps:
    - uses: actions/checkout@v2

    - name: Clean up addon directory
      shell: pwsh
      run: |
        Remove-Item -Path "${{ github.workspace }}/.git" -Recurse -Force -Verbose
        Remove-Item -Path "${{ github.workspace }}/.github" -Recurse -Force -Verbose

    - name: Set version
      id: set-version
      shell: pwsh
      run: |
        $scriptFile = '${{ github.workspace }}\artist_resolver.py'
        $content = Get-Content $scriptFile -Raw

        if ($content -match "PLUGIN_VERSION = '(\d+\.\d+)\.(\d+)'") {
            $majorMinorVersion = $matches[1]
            $newVersion = "$majorMinorVersion.$env:GITHUB_RUN_NUMBER"
        } else {
          throw "Could not find plugin version in script file."
        }

        Write-Output "Setting version to $newVersion"
        "VERSION=$newVersion" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        "VERSION=$newVersion" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

        $content = $content -replace "(PLUGIN_VERSION = '\d+\.\d+\.\d+')", "PLUGIN_VERSION =`'$newVersion`'"
        $content | Set-Content $scriptFile -Force
    
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: plugin
        path: ${{ github.workspace }}
        
  release:
    # if: ${{ github.event_name != 'pull_request' && github.ref_name == 'main' }}
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    steps:

    - name: Get plugin - x64
      uses: actions/download-artifact@v3
      with:
        name: plugin
        path: ${{ github.workspace }}/publish/

    - name: Zip Files
      run: |
        cd "${{ github.workspace }}/publish/" 
        zip -r "${{ env.EXTENSION_FILE_NAME }}.zip" .

    - name: Create release
      uses: actions/github-script@v7
      id: create-release
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const {data: newRelease} = await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            name: '${{ needs.build.outputs.version }}',
            tag_name: '${{ needs.build.outputs.version }}',
            generate_release_notes: true,
            draft: false,
            prerelease: false
          });
          console.log(`Release has been created with id ${newRelease.id}: ${newRelease.html_url}`)
          core.setOutput("url", newRelease.html_url)
          core.setOutput("id", newRelease.id)

    - name: Upload Release Assets
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs').promises
          const attachment = await fs.readFile("./publish/${{ env.EXTENSION_FILE_NAME }}.zip")
          await github.rest.repos.uploadReleaseAsset({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: '${{ steps.create-release.outputs.id }}',
            data: attachment,
            name: 'ArtistNormalize${{ env.EXTENSION_FILE_NAME }}r.zip'
          });